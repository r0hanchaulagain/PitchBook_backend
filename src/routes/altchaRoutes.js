const express = require("express");
const router = express.Router();
const altchaController = require("../controllers/altchaController");

/**
 * GET /altcha
 * 
 * Endpoint for fetching a new random challenge to be used by the ALTCHA widget
 */
router.get("/altcha", async (req, res) => {
	try {
		// Generate a new random challenge with specified complexity
		const challenge = await altchaController.generateChallenge();
		
		// Return the generated challenge as JSON
		res.json(challenge);
	} catch (error) {
		console.error("Error generating ALTCHA challenge:", error);
		res.status(500).json({
			error: 'Failed to create challenge',
			details: error.message
		});
	}
});

/**
 * POST /verify
 * 
 * Endpoint for form submissions that verifies the simple PoW challenge without spam filter
 */
router.post("/verify", async (req, res) => {
	try {
		// Get the 'altcha' field from request body (JSON or form data)
		const altcha = req.body.altcha;

		// If the 'altcha' field is missing, return an error
		if (!altcha) {
			return res.status(400).json({
				error: 'ALTCHA payload missing',
			});
		}

		// Verify the solution using the secret HMAC key
		const verificationResult = await altchaController.verifyChallenge(altcha);

		if (!verificationResult.success) {
			return res.status(400).json({
				error: verificationResult.message,
				code: verificationResult.error
			});
		}

		// ALTCHA payload successfully verified
		res.json({
			success: true,
			message: "ALTCHA verified successfully"
		});
	} catch (error) {
		console.error("Error verifying ALTCHA:", error);
		res.status(500).json({
			error: 'Failed to process verification',
			details: error.message
		});
	}
});

/**
 * POST /verify-spam-filter
 * 
 * Endpoint for form submissions that verifies the server signature generated by the spam filter
 */
router.post("/verify-spam-filter", async (req, res) => {
	try {
		// Get the 'altcha' field from request body
		const altcha = req.body.altcha;

		// If the 'altcha' field is missing, return an error
		if (!altcha) {
			return res.status(400).json({
				error: 'ALTCHA payload missing',
			});
		}

		// Verify with spam filter
		const verificationResult = await altchaController.verifyWithSpamFilter(altcha, req.body);

		if (!verificationResult.success) {
			return res.status(400).json({
				error: verificationResult.message,
				code: verificationResult.error
			});
		}

		// ALTCHA payload successfully verified with spam filter
		res.json({
			success: true,
			message: "ALTCHA verified successfully with spam filter",
			verificationData: verificationResult.verificationData
		});
	} catch (error) {
		console.error("Error verifying ALTCHA with spam filter:", error);
		res.status(500).json({
			error: 'Failed to process verification with spam filter',
			details: error.message
		});
	}
});

module.exports = router;
